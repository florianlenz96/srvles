@page "/"
@using BlazorApp.Client.Services
@using BlazorApp.Shared.Models.ShortenedUrl
@using System.Text.Json

<PageTitle>Free URL Shortener | by neocentric</PageTitle>
<link rel="stylesheet" type="text/css" href="css/Shortener.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet" />

<div id="shortener">
    <article class="content px-4" style="text-align: center">
        <h1>Free URL Shortener</h1>

        <p>svrl.es is a free tool to shorten URLs powered by neocentric. Create short & memorable links in seconds.</p>
        
        <EditForm Model="@url" OnValidSubmit="@Shorten">
            <input type="url" name="url" placeholder="Enter your URL" required @bind="url" />
            @if (!loading)
            {
                <button style="width: 150px;" type="submit">Short it</button>
            }
            else
            {
                <Button style="width: 150px;" Loading="true">
                    <LoadingTemplate>
                        <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                        Shorting...
                    </LoadingTemplate>
                </Button>
            }
            
        </EditForm>
        
        
        
        <div class="shorten-urls">
            @foreach (var shortUrl in shortUrls)
            {
                <div class="shortened-url">
                    <span class="origin-url">@shortUrl.Key</span>
                    <a class="short-url" href="https://@shortUrl.Value" target="_blank">@shortUrl.Value</a>
                    <i class="icon bi bi-qr-code" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Tooltip on bottom"></i>
                    <i class="icon bi bi-clipboard" onclick="@CopyToClipboard(shortUrl.Value)" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Tooltip on bottom"></i>
                </div>
            }
        </div>
    </article>
</div>

@code {
    string url = string.Empty;
    bool loading = false;
    Dictionary<string, string> shortUrls = new();
    
    [Inject]
    CookieStorageAccessor _storageAccessor { get; set; }
    
    [Inject]
    CopyAccessor _copyAccessor { get; set; }
    
    [Inject]
    HttpClient bffClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var storedUrls = await _storageAccessor.GetValueAsync<Dictionary<string, string>>("shortUrls");
        if (storedUrls != null)
        {
            shortUrls = storedUrls;
        }
        
        await base.OnInitializedAsync();
    }

    async Task Shorten(EditContext editContext)
    {
        loading = true;
        var originUrl = editContext.Model.ToString();
        
        var json = JsonSerializer.Serialize(new ShortenUrlRequest
        {
            Url = originUrl,
        });
        var responseMessage = await bffClient.PostAsync("api/ShortenUrl", new StringContent(json, System.Text.Encoding.UTF8, "application/json"));

        if (!responseMessage.IsSuccessStatusCode)
        {
            return;
        }
        
        var shortenUrl = await responseMessage.Content.ReadAsStringAsync();
        shortUrls.Add(originUrl, shortenUrl);
        await _storageAccessor.SetValueAsync("shortUrls", shortUrls);
        url = string.Empty;
        
        loading = false;
    }
    
    async Task CopyToClipboard(string url)
    {
        await _copyAccessor.CopyShortUrl(url);
    }

}